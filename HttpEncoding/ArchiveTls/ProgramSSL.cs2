using System;
using System.Net;
using System.Net.Sockets;
using System.Net.Security;
using System.Text;
using RestSharp;
using System.Collections.Generic;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;



namespace HttpEncoding
{
    //-- UDP not working, 2020-07-10
    public class GetSocketSsl
    {
        private static RestClient client = new RestClient("https://app2.kitchener.ca/");
        //public static void TestMainSsl(string[] args)
        //{
            //var machineName = "app2.kitchener.ca";
            //// Create a TCP/IP client socket.
            //// machineName is the host running the server application.
            //TcpClient client = new TcpClient(machineName, 443);
            //Console.WriteLine("Client connected.");
            //// Create an SSL stream that will close the client's stream.
            //SslStream sslStream = new SslStream(
            //    client.GetStream(),
            //    false,
            //    new RemoteCertificateValidationCallback(ValidateServerCertificate),
            //    null
            //    );
            //// The server name must match the name on the server certificate.
            //try
            //{
            //    sslStream.AuthenticateAsClient(serverName);
            //}
            //catch (AuthenticationException e)
            //{
            //    Console.WriteLine("Exception: {0}", e.Message);
            //    if (e.InnerException != null)
            //    {
            //        Console.WriteLine("Inner exception: {0}", e.InnerException.Message);
            //    }
            //    Console.WriteLine("Authentication failed - closing the connection.");
            //    client.Close();
            //    return;
            //}


            //// Send request
            //byte[] buffer = new byte[2048];
            //int bytes;
            //byte[] request = Encoding.UTF8.GetBytes(String.Format("GET https://{0}/  HTTP/1.1\r\nHost: {0}\r\n\r\n", serverName));
            //sslStream.Write(request, 0, request.Length);
            //sslStream.Flush();

            //// Read response
            //do
            //{
            //    bytes = sslStream.Read(buffer, 0, buffer.Length);
            //    Console.Write(Encoding.UTF8.GetString(buffer, 0, bytes));
            //} while (bytes == 2048);

        //    Console.ReadKey();
        //}
    }
}
